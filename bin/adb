#!/usr/bin/env bash

VERSION=1.0.1
BUILD_DATE=1603704600

ADB=$ADBS_AGENT
ROOT=$(dirname $0)/../
CONFIG=$ROOT/.properties

function getConfig() {
    if [[ ! -f "$CONFIG" ]]; then
        echo $2
        return
    fi

    val=$(grep -P "^\s*[^#]?${1}=.*$" $CONFIG | cut -d '=' -f 1 --complement)
    if [[ -z $val ]]; then
        val=$2
    fi
    echo $val
}

function setConfig() {
    key=$1
    val=$2

    if [[ ! -f $CONFIG ]]; then
        touch $CONFIG
    fi

    if [[ $(grep -P "^\s*[^#]?${key}=.*$" $CONFIG) ]]; then
        val=${val////\\/}
        sed -i "s/$key=.*/$key=${val}/g" $CONFIG
    else
        echo $key=$val >>$CONFIG
    fi
}

function resetConfig() {
    key=$1

    if [[ ! -f $CONFIG ]]; then
        return
    fi

    sed -i "/$key=.*/d" $CONFIG
}

LOCALHOST=$(getConfig global.localhost localhost)

FZF_SERIAL=$(getConfig fzf.serial 'fzf --layout=reverse --inline-info --height=5')
FZF_PACKAGE=$(getConfig fzf.package 'fzf --layout=reverse --inline-info --height=12')
FZF_FILE=$(getConfig fzf.file 'fzf --layout=reverse --inline-info --height=12')

SERIAL_FILE=$(getConfig global.serial.file '/tmp/.adbs_serial')
SERVER_FILE=$ROOT/server.apk

EXT_NO_DEVICE=2
EXT_CANCELLED=4

NEED_SERIAL_CMDS=(
    install
    logcat
    pull
    push
    reconnect
    shell
    tcpip
    uninstall
    \
    is
    us
    pkg
    dp
    dumppkg
    pi
    pkginfo
    pp
    pullapk
    start
    startapp
    as
    appsetting
    dev
    devopt
    url
    openurl
    scp
    setclip
    sc
    screencap
    wr
    winrecord
    sr
    screenrecord
)

function echoColorful() {
    ext=$1
    msg=$2

    if [[ $ext == 0 ]]; then
        echo -e "\033[032m$msg\033[0m"
    else
        echo -e "\033[031m$msg\033[0m"
    fi
    return $ext
}

if [[ -z $ADB ]]; then
    echoColorful -1 "adb agent not found"
    exit
fi

function execServerCommand() {
    serial=$1
    shift 1
    args=$@

    path="/data/local/tmp/adbs_server"
    main="me.zpp0196.adbs.Server"
    $ADB -s $serial push $SERVER_FILE $path &>/dev/null &&
        $ADB -s $serial shell CLASSPATH=$path app_process / $main $args
}

function isDeviceOnline() {
    serial=$1
    $ADB devices | grep "^$serial[[:space:]]\+device" &>/dev/null
}

function selectSerial() {
    serial=$1

    if [[ -n $serial ]]; then
        isDeviceOnline $serial
        if [[ $? == 0 ]]; then
            echo $serial
            exit
        fi
    fi

    devices=$($ADB devices | sed -n '/device$/p')
    if [[ -z $devices ]]; then
        exit $EXT_NO_DEVICE
    elif [[ $(echo "$devices" | wc -l) == 1 ]]; then
        serial=$(echo "$devices" | cut -f 1)
    else
        serial=$(echo "$devices" | $FZF_SERIAL | cut -f 1)
        if [[ -z $serial ]]; then
            exit $EXT_CANCELLED
        fi
    fi
    echo $serial
}

function setSerial() {
    serial=$1
    serial=$(selectSerial $serial)
    echoColorful $? "$serial"
    if [[ $? != 0 ]]; then
        exit
    fi

    echo $serial >$SERIAL_FILE
}

function getSerial() {
    option=$1

    if [[ -f $SERIAL_FILE ]]; then
        serial=$(cat $SERIAL_FILE)
        if [[ $option == "-n" ]]; then
            selectSerial $serial
            exit
        else
            isDeviceOnline $serial
            echoColorful $? "$serial"
        fi
    fi

    if [[ $option == "-n" ]]; then
        serial=$(selectSerial) || exit
        echo $serial
    fi
}

function clearSerial() {
    if [[ -f $SERIAL_FILE ]]; then
        serial=$(cat $SERIAL_FILE)
        isDeviceOnline $serial
        echoColorful $? "$serial"
        rm $SERIAL_FILE
    fi
}

function connectLocalDevice() {
    $ADB connect $LOCALHOST:$2
}

function disconnectDevice() {
    case $2 in
    "-s")
        devices=$($ADB devices | sed '1d')
        if [[ -n $devices ]]; then
            serial=$($ADB devices | sed '1d;$d' | $FZF_SERIAL | cut -f 1)
            if [[ -z $serial ]]; then
                exit $EXT_CANCELLED
            fi
        fi
        $ADB disconnect $serial
        ;;

    *) $ADB "$@" ;;
    esac
}

function disconnectSSHDevice() {
    case $1 in
    "-a")
        $ADB devices | grep $LOCALHOST | cut -f 1 | cut -d ':' -f 2 |
            xargs -i $0 disconnect-ssh {}
        ;;
    *)
        port=$1
        if [[ -z $port ]]; then
            port="$($ADB devices | grep $LOCALHOST | $FZF_SERIAL | cut -f 1 | cut -d ':' -f 2)"
            if [[ -z $port ]]; then
                exit $EXT_CANCELLED
            fi
        fi
        adb disconnect $LOCALHOST:$port
        pkill -f "ssh -L $port"
        ;;
    esac
}

function selectPackageWithSerial() {
    serial=$1
    arg2=$2
    if [[ $arg2 == "-c" ]]; then
        $ADB -s $serial shell dumpsys window | grep mFocusedApp | sed 's/.*\s\(.*\)\/.*/\1/' | sed -n '1p'
        return
    elif [[ -n $arg2 && $arg2 != "-s" && $arg2 != "-3" ]]; then
        echo $arg2
        return
    fi

    filter=$arg2
    pkg=$($ADB -s $serial shell pm list package $filter -u | cut -d ':' -f 2 | $FZF_PACKAGE)
    if [[ -z $pkg ]]; then
        exit $EXT_CANCELLED
    fi

    echo $pkg
}

function installWithSerial() {
    serial=$1
    cmd=$2
    shift 2
    args="$@"

    for arg in $args; do
        if [[ $arg =~ .*apk$ ]]; then
            apk=$arg
        fi
    done

    if [[ -n $apk ]]; then
        $ADB -s $serial install $args
        exit
    fi

    paths=$(getConfig install.paths ".")
    paths=$(eval echo "$paths")

    list=$(find $paths -name '*.apk')
    if [[ -z $list ]]; then
        echoColorful 1 "error: no matches found: *.apk"
        exit
    fi
    apk=$(echo "$list" | $FZF_FILE)
    if [[ -z $apk ]]; then
        exit $EXT_CANCELLED
    fi

    $ADB -s $serial install $args "$apk"
}

function uninstallWithSerial() {
    serial=$1
    shift 2
    case $1 in
    "-s" | "")
        pkg=$(selectPackageWithSerial $serial) || exit
        $ADB -s $serial uninstall "$@" $pkg
        ;;
    *)
        $ADB -s $serial uninstall "$@"
        ;;
    esac
}

function pullApkWithSerial() {
    serial=$1
    shift 1
    while [ $# != 0 ]; do
        case $1 in
        "-p")
            pkg=$2
            shift
            ;;
        "-o")
            path=$2
            shift 1
            ;;
        "-c" | "-s" | "-3")
            break
            ;;
        esac
        shift
    done

    if [[ -z $pkg ]]; then
        pkg=$(selectPackageWithSerial $serial $@) || exit
    fi

    if [[ -z $path ]]; then
        path=$(getConfig pullapk.output './$(adb -s ${serial} pi ${pkg} --label)_${pkg}_v$(adb -s ${serial} pi ${pkg} --version-name)_$(adb -s ${serial} pi ${pkg} --md5).apk')
        path=$(eval "echo "$path"")
    fi

    _path=$($ADB -s $serial shell pm path $pkg | cut -d ':' -f 2)
    $ADB -s $serial pull $_path "$path" &>/dev/null || exit
    echo $path
}

function dumpPackageInfoWithSerial() {
    serial=$1
    pkg=$(selectPackageWithSerial $@) || exit

    execServerCommand $serial dp $pkg
}

function getPackageInfoWithSerial() {
    serial=$1
    shift 1

    execServerCommand $serial pi $@
}

function startAppWithSerial() {
    serial=$1
    pkg=$(selectPackageWithSerial $@) || exit

    shift 1
    if [[ ${pkg:0:1} == "-" ]]; then
        options=$@
        pkg=$(selectPackageWithSerial $serial) || exit
    else
        shift 1
        options=$@
    fi

    activity=$(execServerCommand $serial pi $pkg -m)
    if [[ -z $activity ]]; then
        echoColorful 1 "no activity found"
        exit
    fi

    $ADB -s $serial shell am start $options $pkg/$activity
}

function startAppSettingWithSerial() {
    serial=$1
    pkg=$(selectPackageWithSerial $@) || exit

    $ADB -s $serial shell am start -a android.settings.APPLICATION_DETAILS_SETTINGS package:$pkg
}

function startDevOptionWithSerial() {
    serial=$1

    $ADB -s $serial shell am start -a android.settings.APPLICATION_DEVELOPMENT_SETTINGS
}

function openUrlWithSerial() {
    serial=$1
    url=$2
    url=${url// /\\ }

    if [[ -n $url && ${url:0:4} != "http" ]]; then
        url="http://$url"
    fi

    $ADB -s $serial shell am start -d "$url"
}

function setClipboardDataWithSerial() {
    serial=$1
    text=$2
    text=${text// /\\ }

    execServerCommand $serial scp "$text"

    case $3 in
    "-p") $ADB -s $serial shell input keyevent 279 ;;
    "-i")
        $ADB -s $serial shell input keyevent 279
        execServerCommand $serial scp
        ;;
    esac
}

function screencapWithSerial() {
    serial=$1
    if [[ -z $2 ]]; then
        path=$(getConfig screencap.output './screenshot_$(date +%Y%m%d%H%M%S).png')
        path=$(eval "echo "$path"")
    else
        path=$2
    fi
    $ADB -s $serial shell screencap -p >"$path" || exit
    echo $path
}

function windowrecordWithSerial() {
    serial=$1

    while true; do
        window=$($ADB -s $serial shell dumpsys window | grep mCurrentFocus | cut -d '=' -f 2) || exit
        if [[ $window != "null" && $window != $last ]]; then
            last=$window
            echo $last
        fi
    done
}

function screenrecordWithSerial() {
    serial=$1
    if [[ $2 == "--help" || $2 == "-h" ]]; then
        $ADB -s $serial shell screenrecord --help
        exit
    fi

    shift 1
    case $2 in
    "-o")
        path=$2
        shift 2
        options=$@
        ;;
    *)
        path=$(getConfig screenrecord.output './screenrecord_$(date +%Y%m%d%H%M%S).mp4')
        path=$(eval "echo "$path"")
        options=$@
        ;;
    esac

    show_touches=$($ADB -s $serial shell settings get system show_touches)
    if [[ $show_touches == null ]]; then
        show_touches=0
    fi
    if [[ $(getConfig screenrecord.touches 1) == 1 ]]; then
        $ADB -s $serial shell settings put system show_touches 1
    fi

    _path=$(getConfig screenrecord.cache '/sdcard/$(date +%Y%m%d%H%M%S).mp4')
    _path=$(eval "echo "$_path"")
    _path=${_path// /\\ }
    trap "sleep 1 && $ADB -s $serial pull $_path \"$path\">/dev/null; \
        $ADB -s $serial shell rm \"$_path\" ; \
        $ADB -s $serial shell settings put system show_touches $show_touches ; \
        echo ; echo $path" INT
    $ADB -s $serial shell screenrecord $_path $options || exit
}

function handleWithSerial() {
    serial=$1
    opt=$2

    case $opt in
    "pkg")
        shift 2
        selectPackageWithSerial $serial $@
        ;;
    "install" | "is")
        shift 1
        installWithSerial $serial "$@"
        ;;
    "uninstall" | "us")
        shift 1
        uninstallWithSerial $serial $@
        ;;
    "pullapk" | "pp")
        shift 2
        pullApkWithSerial $serial $@
        ;;
    "dumppkg" | "dp")
        shift 2
        dumpPackageInfoWithSerial $serial $@
        ;;
    "pkginfo" | "pi")
        shift 2
        getPackageInfoWithSerial $serial $@
        ;;
    "startapp" | "start")
        shift 2
        startAppWithSerial $serial $@
        ;;
    "appsetting" | "as")
        shift 2
        startAppSettingWithSerial $serial $@
        ;;
    "devopt" | "dev")
        shift 2
        startDevOptionWithSerial $serial $@
        ;;
    "openurl" | "url")
        shift 2
        openUrlWithSerial $serial "$@"
        ;;
    "setclip" | "scp")
        shift 2
        setClipboardDataWithSerial $serial "$@"
        ;;
    "screencap" | "sc")
        shift 2
        screencapWithSerial $serial "$@"
        ;;
    "winrecord" | "wr")
        shift 2
        windowrecordWithSerial $serial $@
        ;;
    "screenrecord" | "sr")
        shift 2
        screenrecordWithSerial $serial "$@"
        ;;
    *)
        shift 1
        $ADB -s $serial $@
        ;;
    esac
}

function handleWithoutSerial() {
    if [[ $1 == "-sl" ]]; then
        shift 1
    elif [[ -f $SERIAL_FILE ]]; then
        serial=$(cat $SERIAL_FILE)
        isDeviceOnline $serial
        if [[ $? != 0 ]]; then
            serial=""
        fi
    fi

    serial=$(selectSerial $serial)
    ext=$?
    if [[ $ext == $EXT_NO_DEVICE ]]; then
        $ADB shell
    elif [[ $ext != 0 ]]; then
        exit $ext
    else
        handleWithSerial $serial "$@"
    fi
}

case $1 in
"config")
    case $2 in
    "list") cat $CONFIG ;;
    "get") echo $(getConfig "$3" '') ;;
    "set") setConfig "$3" "$4" ;;
    "reset") resetConfig "$3" ;;
    esac
    ;;
"ls")
    shift 1
    $ADB devices $@
    ;;
"sl") selectSerial $2 ;;
"ss") setSerial $2 ;;
"gs") getSerial $2 ;;
"cs") clearSerial ;;
"serial")
    case $2 in
    "select") selectSerial $3 ;;
    "set") setSerial $3 ;;
    "get") getSerial $3 ;;
    "clear") clearSerial ;;
    esac
    ;;
"-sl")
    handleWithoutSerial "$@"
    ;;
"connect-localhost" | "cl") connectLocalDevice $@ ;;
"disconnect" | "dc") disconnectDevice $@ ;;
"disconnect-ssh" | "dcs")
    shift 1
    disconnectSSHDevice $@
    ;;
"ver" | "v")
    echo -e "Version\t\t" $VERSION
    echo -e "Build date\t" $(date --date="@$BUILD_DATE" '+%Y/%m/%d %H:%M:%S')
    echo -e "Install path\t" $0
    ;;
"-s")
    shift 1
    handleWithSerial "$@"
    ;;
*)
    if [[ $(echo "${NEED_SERIAL_CMDS[@]}" | grep -w $1) ]]; then
        handleWithoutSerial "$@"
    else
        $ADB $@
    fi
    ;;
esac
