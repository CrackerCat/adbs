#!/usr/bin/env bash

VERSION=1.0.2
BUILD_DATE=1604937600

set -u

if [[ -z ${ADBS_ROOT:-} ]]; then
    echo -e "\033[031m\$ADBS_ROOT is not in your \$PATH\033[0m"
    exit -1
fi

source $ADBS_ROOT/lib/cmds.sh
source $ADBS_ROOT/lib/config.sh
source $ADBS_ROOT/lib/error.sh
source $ADBS_ROOT/lib/server.sh
source $ADBS_ROOT/lib/utils.sh

ADB=${ADBS_AGENT:-}

if [[ -z $ADB ]]; then
    log::err "$(err::msg $ERR_NO_AGENT)"
    exit $ERR_NO_AGENT
fi

function select_serial() {
    local serial=${1:-}

    if [[ -n $serial ]]; then
        adb::is_device_online $serial
        if [[ $? == 0 ]]; then
            echo $serial
            exit
        fi
    fi

    local devices=$($ADB devices | sed -n '/device$/p')
    if [[ -z $devices ]]; then
        exit $ERR_NO_DEVICE
    elif [[ $(echo "$devices" | wc -l) == 1 ]]; then
        serial=$(echo "$devices" | cut -f 1)
    else
        serial=$(echo "$devices" | $(cfg::fzf_serial) | cut -f 1)
        if [[ -z $serial ]]; then
            exit $ERR_CANCELLED
        fi
    fi
    echo $serial
}

function set_serial() {
    local serial=${1:-}
    serial=$(select_serial $serial)
    local ret=$?
    if [[ $ret != 0 ]]; then
        log::err "$(err::msg $ret)"
        exit $ret
    else
        log::info "$serial"
    fi

    echo $serial >$SERIAL_FILE
}

function get_serial() {
    local option=${1:-}

    if [[ -f $SERIAL_FILE ]]; then
        local serial=$(cat $SERIAL_FILE)
        if [[ $option == "-n" ]]; then
            select_serial $serial
            exit
        else
            adb::is_device_online $serial
            local ret=$?
            if [[ $ret == 0 ]]; then
                echo -e "\033[032m$serial\033[0m"
            else
                echo -e "\033[031m$serial\033[0m"
            fi
            exit $ret
        fi
    fi

    if [[ $option == "-n" ]]; then
        select_serial
    fi
}

function unset_serial() {
    if [[ -f $SERIAL_FILE ]]; then
        local serial=$(cat $SERIAL_FILE)
        adb::is_device_online $serial
        if [[ $? == 0 ]]; then
            echo -e "\033[032m$serial\033[0m"
        else
            echo -e "\033[031m$serial\033[0m"
        fi
        rm $SERIAL_FILE
    fi
}

function connect_local_device() {
    local port=${2:-}
    if [[ -z $port ]]; then
        log::err "no port specified"
        exit -1
    fi
    $ADB connect $(cfg::localhost):$port
}

function reconnect_remote_device(){
    local devices=$($ADB devices | sed '1d' | grep ':')
    if [[ -z $devices ]]; then
        log::err "$(err::msg $ERR_NO_DEVICE)"
        exit $ERR_NO_DEVICE
    fi
    local device="$(echo "$devices" | $(cfg::fzf_serial) | cut -f 1)"
    if [[ -z $device ]]; then
        exit $ERR_CANCELLED
    fi

    local ip_port=(${device//:/ })
    local ip=${ip_port[0]}
    local port=${ip_port[1]}

    for i in {1..10}; do
        $ADB disconnect $ip:$port &>/dev/null
        $ADB connect $ip:$port
        adb::is_device_online "$ip:$port"
        if [[ $? == 0 ]]; then
            if [[ -f $SERIAL_FILE ]]; then
                serial=$(cat $SERIAL_FILE)
                if [[ $serial == $device ]]; then
                    serial=$ip:$port
                    echo $serial >$SERIAL_FILE
                fi
            fi
            break
        fi

        read -p "$ip:" port
    done
}

function disconnect_device() {
    local option=${2:-}
    case $option in
    "-s")
        local devices=$($ADB devices | sed '1d')
        if [[ -n $devices ]]; then
            local serial=$(echo "$devices" | $(cfg::fzf_serial) | cut -f 1)
            if [[ -z $serial ]]; then
                exit $ERR_CANCELLED
            fi
            $ADB disconnect $serial
        else
            log::err "$(err::msg $ERR_NO_DEVICE)"
            exit $ERR_NO_DEVICE
        fi
        ;;
    *)
        shift 1
        $ADB disconnect "$@"
        ;;
    esac
}

function disconnect_ssh_device() {
    local option=${1:-}
    local LOCALHOST=$(cfg::localhost)
    case $option in
    "-a")
        $ADB devices | grep $LOCALHOST | cut -f 1 | cut -d ':' -f 2 |
            xargs -i $0 disconnect-ssh {}
        ;;
    *)
        local port=${1:-}
        if [[ -z $port ]]; then
            local devices=$($ADB devices | grep $LOCALHOST )
            if [[ -z $devices ]]; then
                log::err "$(err::msg $ERR_NO_DEVICE)"
                exit $ERR_NO_DEVICE
            fi
            port="$(echo "$devices" | $(cfg::fzf_serial) | cut -f 1 | cut -d ':' -f 2)"
            if [[ -z $port ]]; then
                exit $ERR_CANCELLED
            fi
        fi
        adb disconnect $LOCALHOST:$port
        pkill -f "ssh -L $port"
        ;;
    esac
}

function select_package_with_serial() {
    local serial=$1
    local arg2=${2:-}
    if [[ $arg2 == "-c" ]]; then
        $ADB -s $serial shell dumpsys window | grep mFocusedApp | sed 's/.*\s\(.*\)\/.*/\1/' | sed -n '1p'
        return
    elif [[ -n $arg2 && $arg2 != "-s" && $arg2 != "-3" ]]; then
        log::err "unknown option: $arg2"
        exit -1
    fi

    local filter=$arg2
    local pkg=$($ADB -s $serial shell pm list package $filter -u | cut -d ':' -f 2 | $(cfg::fzf_package))
    if [[ -z $pkg ]]; then
        exit $ERR_CANCELLED
    fi

    echo $pkg
}

function install_with_serial() {
    local serial=$1
    local cmd=$2
    shift 2
    local args="$@"
    local apk=""

    for arg in $args; do
        if [[ $arg =~ .*apk$ ]]; then
            apk=$arg
        fi
    done

    if [[ -n $apk ]]; then
        $ADB -s $serial install $args
        exit
    fi

    local paths=$(cfg::install_paths)
    paths=$(eval echo "$paths")

    local list=$(find $paths -name '*.apk')
    if [[ -z $list ]]; then
        log::err "no matches found: *.apk"
        exit -1
    fi
    apk=$(echo "$list" | $(cfg::fzf_file))
    if [[ -z $apk ]]; then
        exit $ERR_CANCELLED
    fi

    $ADB -s $serial install $args "$apk"
}

function uninstall_with_serial() {
    local serial=$1
    shift 2
    case ${1:-} in
    "-s" | "")
        local pkg
        pkg=$(select_package_with_serial $serial) || exit
        $ADB -s $serial uninstall "$@" $pkg
        ;;
    *)
        $ADB -s $serial uninstall "$@"
        ;;
    esac
}

function pull_apk_with_serial() {
    local serial=$1
    shift 1
    local pkg=""
    local path=""
    while [ $# != 0 ]; do
        case $1 in
        "-p")
            pkg=$2
            shift
            ;;
        "-o")
            path=$2
            shift 1
            ;;
        "-c" | "-s" | "-3")
            break
            ;;
        *)
            log::err "unknown option: $1"
            exit -1
            ;;
        esac
        shift
    done

    if [[ -z $pkg ]]; then
        pkg=$(select_package_with_serial $serial $@) || exit
    fi

    if [[ -z $path ]]; then
        path=$(cfg::pullapk_output)
        path=$(eval "echo "$path"")
    fi

    local _path=$(server::exec $serial pi $pkg --path)
    $ADB -s $serial pull $_path "$path" &>/dev/null || exit
    echo $path
}

function dump_package_info_with_serial() {
    local serial=$1
    local pkg=$(select_package_with_serial $@) || exit

    server::exec $serial dp $pkg
}

function get_package_info_with_serial() {
    local serial=$1
    local pkg=${2:-}
    if [[ -z $pkg ]];then
        log::err "no package specified"
        exit -1
    fi

    shift 1

    server::exec $serial pi $@
}

function start_app_with_serial() {
    local serial=$1
    local pkg=""
    pkg=$(select_package_with_serial $@)
    local ret=$?
    if [[ $ret != 0 ]]; then
        [[ $ret != $ERR_CANCELLED ]] && echo "$pkg"
        exit $ret
    fi

    shift 2
    local options=$@

    local activity=$(server::exec $serial pi $pkg -m)
    if [[ -z $activity ]]; then
        log::err "$the main activity of $pkg not found"
        exit -1
    fi

    $ADB -s $serial shell am start $options $pkg/$activity
}

function start_app_setting_with_serial() {
    local serial=$1
    local pkg
    pkg=$(select_package_with_serial $@) || exit

    $ADB -s $serial shell am start -a android.settings.APPLICATION_DETAILS_SETTINGS package:$pkg
}

function start_dev_opts_with_serial() {
    local serial=$1

    $ADB -s $serial shell am start -a android.settings.APPLICATION_DEVELOPMENT_SETTINGS
}

function open_url_with_serial() {
    local serial=$1
    local url=${2:-}
    if [[ -z $url ]]; then
        log::err "no url specified"
        exit -1
    fi
    url=${url// /\\ }

    if [[ -n $url && ${url:0:4} != "http" ]]; then
        url="http://$url"
    fi

    $ADB -s $serial shell am start -d "$url"
}

function set_clipboard_with_serial() {
    local serial=$1
    local text=${2:-}
    local text=${text// /\\ }

    server::exec $serial scp "$text"

    case ${3:-} in
    "-p") $ADB -s $serial shell input keyevent 279 ;;
    "-i")
        $ADB -s $serial shell input keyevent 279
        server::exec $serial scp
        ;;
    esac
}

function screencap_with_serial() {
    local serial=$1
    local path=${2:-}
    if [[ -z $path ]]; then
        path=$(cfg::screencap_output)
        path=$(eval "echo "$path"")
    fi
    if [[ ! -e $(dirname $path) ]]; then
        mkdir -p $(dirname $path) || exit
    fi
    $ADB -s $serial shell screencap -p >"$path" || exit
    echo $path
}

function record_window_with_serial() {
    local serial=$1

    local last=""
    while true; do
        local window=$($ADB -s $serial shell dumpsys window | grep mCurrentFocus) || exit
        window=${window:16}
        if [[ $window != "null" && $window != $last ]]; then
            last=$window
            echo $last
        fi
    done
}

function screenrecord_with_serial() {
    local serial=$1
    local option=${2:-}
    if [[ $option == "--help" || $option == "-h" ]]; then
        $ADB -s $serial shell screenrecord --help
        exit
    fi

    shift 1
    local path=""
    local options=""
    case $option in
    "-o")
        path=$2
        shift 2
        options=$@
        ;;
    *)
        path=$(cfg::screenrecord_output)
        path=$(eval "echo "$path"")
        options=$@
        ;;
    esac
    if [[ ! -e $(dirname $path) ]]; then
        mkdir -p $(dirname $path) || exit
    fi

    local show_touches=$($ADB -s $serial shell settings get system show_touches)
    if [[ $show_touches == null ]]; then
        show_touches=0
    fi
    if [[ $(cfg::screenrecord_touches) == 1 ]]; then
        $ADB -s $serial shell settings put system show_touches 1
    fi

    local _path=$(cfg::screenrecord_cache)
    _path=$(eval "echo "$_path"")
    _path=${_path// /\\ }

    trap "sleep 1 && $ADB -s $serial pull $_path \"$path\">/dev/null; \
        $ADB -s $serial shell rm \"$_path\" ; \
        $ADB -s $serial shell settings put system show_touches $show_touches ; \
        echo ; echo $path" INT
    $ADB -s $serial shell screenrecord $_path $options || exit
}

function handle_with_serial() {
    local serial=${1:-}
    local opt=${2:-}

    case $opt in
    "pkg")
        shift 2
        select_package_with_serial $serial $@
        ;;
    "install" | "is")
        shift 1
        install_with_serial $serial "$@"
        ;;
    "uninstall" | "us")
        shift 1
        uninstall_with_serial $serial $@
        ;;
    "pullapk" | "pp")
        shift 2
        pull_apk_with_serial $serial $@
        ;;
    "dumppkg" | "dp")
        shift 2
        dump_package_info_with_serial $serial $@
        ;;
    "pkginfo" | "pi")
        shift 2
        get_package_info_with_serial $serial $@
        ;;
    "startapp" | "start")
        shift 2
        start_app_with_serial $serial $@
        ;;
    "appsetting" | "as")
        shift 2
        start_app_setting_with_serial $serial $@
        ;;
    "devopt" | "dev")
        shift 2
        start_dev_opts_with_serial $serial $@
        ;;
    "openurl" | "url")
        shift 2
        open_url_with_serial $serial "$@"
        ;;
    "setclip" | "scp")
        shift 2
        set_clipboard_with_serial $serial "$@"
        ;;
    "screencap" | "sc")
        shift 2
        screencap_with_serial $serial "$@"
        ;;
    "winrecord" | "wr")
        shift 2
        record_window_with_serial $serial $@
        ;;
    "screenrecord" | "sr")
        shift 2
        screenrecord_with_serial $serial "$@"
        ;;
    *)
        shift 1
        $ADB -s $serial $@
        ;;
    esac
}

function handle_without_serial() {
    local serial
    if [[ $1 == "-sl" ]]; then
        shift 1
    elif [[ -f $SERIAL_FILE ]]; then
        serial=$(cat $SERIAL_FILE)
        adb::is_device_online $serial
        if [[ $? != 0 ]]; then
            serial=""
        fi
    fi

    serial=$(select_serial ${serial:-})
    local ret=$?
    if [[ $ret != 0 ]]; then
        log::err "$(err::msg $ERR_NO_DEVICE)"
        exit $ret
    else
        handle_with_serial $serial "$@"
    fi
}

case ${1:-} in
"config")
    case ${2:-} in
    "list") cfg::list ;;
    "get") cfg::get "${3:-}" '' ;;
    "set") cfg::set "${3:-}" "${4:-}" ;;
    "reset" | "unset" | "remove") cfg::remove "${3:-}" ;;
    "") log::err "no config option specified" ;;
    *) log::err "unknown option: ${2:-}";;
    esac
    ;;
"ls")
    shift 1
    $ADB devices $@
    ;;
"sl") select_serial ${2:-} ;;
"ss") set_serial ${2:-} ;;
"gs") get_serial ${2:-} ;;
"uns" | "cs") unset_serial ;;
"serial")
    case ${2:-} in
    "select") select_serial ${3:-} ;;
    "set") set_serial ${3:-} ;;
    "get") get_serial ${3:-} ;;
    "unset" | "clear") unset_serial ;;
    "") log::err "no serial option specified" ;;
    *) log::err "unknown option: ${2:-}";;
    esac
    ;;
"-sl")
    handle_without_serial "$@"
    ;;
"connect-localhost" | "cl") connect_local_device $@ ;;
"reconnect-remote" | "rr") reconnect_remote_device $@ ;;
"disconnect" | "dc") disconnect_device $@ ;;
"disconnect-ssh" | "dcs")
    shift 1
    disconnect_ssh_device $@
    ;;
"ver" | "v")
    echo -e "Version\t\t" $VERSION
    echo -e "Build date\t" $(date --date="@$BUILD_DATE" '+%Y/%m/%d %H:%M:%S')
    echo -e "Install path\t" $0
    ;;
"-s")
    shift 1
    handle_with_serial "$@"
    ;;
*)
    if [[ $(echo "${NEED_SERIAL_CMDS[@]}" | grep -w $1) ]]; then
        handle_without_serial "$@"
    else
        $ADB $@
    fi
    ;;
esac
