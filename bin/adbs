#!/usr/bin/env bash

VERSION=1.1.0
BUILD_DATE=1618137000

set -u
set -e

if [[ -z ${ADBS_ROOT:-} ]]; then
    echo -e "\033[031m\adbS_ROOT is not in your \$PATH\033[0m"
    exit -1
fi

if [[ -z ${ADB:-} ]]; then
    ADB=adb
fi

source $ADBS_ROOT/lib/config.sh
source $ADBS_ROOT/lib/error.sh
source $ADBS_ROOT/lib/server.sh
source $ADBS_ROOT/lib/utils.sh

$ADB --version >/dev/null

function select_serial() {
    local serial
    local devices=$($ADB devices | sed '1d;$d')
    if [[ -z $devices ]]; then
        exit $ERR_NO_DEVICE
    elif [[ $(echo "$devices" | wc -l) == 1 ]]; then
        serial=$(echo "$devices" | cut -f 1)
    else
        serial=$(echo "$devices" | $(cfg::fzf_serial) | cut -f 1)
        if [[ -z $serial ]]; then
            exit $ERR_CANCELLED
        fi
    fi
    echo $serial
}

function connect_local_device() {
    local port=${1:-}
    if [[ -z $port ]]; then
        read -p "port: " port
    fi
    [[ -n $port ]] && $ADB connect $(cfg::localhost):$port
}

function reconnect_device() {
    local device
    if [[ -n ${ANDROID_SERIAL:-} ]]; then
        device=$ANDROID_SERIAL
    else
        local devices=$($ADB devices | sed '1d' | grep ':')
        if [[ -z $devices ]]; then
            log::err "$(err::msg $ERR_NO_DEVICE)"
            exit $ERR_NO_DEVICE
        fi
        device="$(echo "$devices" | $(cfg::fzf_serial) | cut -f 1)"
        if [[ -z $device ]]; then
            exit $ERR_CANCELLED
        fi
    fi

    local ip_port=(${device//:/ })
    local ip=${ip_port[0]}
    local port=${ip_port[1]}

    for i in {1..10}; do
        $ADB disconnect $ip:$port &>/dev/null
        $ADB connect $ip:$port
        adb::is_device_online "$ip:$port"
        if [[ $? == 0 ]]; then
            exit
        fi

        read -p "$ip:" port
    done
}

function disconnect_device() {
    local devices=$($ADB devices | sed '1d' | grep ':')
    if [[ -n $devices ]]; then
        local serial=$(echo "$devices" | $(cfg::fzf_serial) | cut -f 1)
        if [[ -z $serial ]]; then
            exit $ERR_CANCELLED
        fi
        $ADB disconnect $serial
    else
        log::err "$(err::msg $ERR_NO_DEVICE)"
        exit $ERR_NO_DEVICE
    fi
}

function disconnect_ssh_device() {
    local option=${1:-}
    local LOCALHOST=$(cfg::localhost)
    case $option in
    "-a")
        $ADB devices | grep $LOCALHOST | cut -f 1 | cut -d ':' -f 2 |
            xargs -i $0 disconnect-ssh {}
        ;;
    *)
        local port=${1:-}
        if [[ -z $port ]]; then
            local devices=$($ADB devices | grep $LOCALHOST)
            if [[ -z $devices ]]; then
                log::err "$(err::msg $ERR_NO_DEVICE)"
                exit $ERR_NO_DEVICE
            fi
            port="$(echo "$devices" | $(cfg::fzf_serial) | cut -f 1 | cut -d ':' -f 2)"
            if [[ -z $port ]]; then
                exit $ERR_CANCELLED
            fi
        fi
        $ADB disconnect $LOCALHOST:$port
        pkill -f "ssh -L $port"
        ;;
    esac
}

function select_package() {
    local filter=${1:-}
    if [[ $filter == "-c" ]]; then
        $ADB shell dumpsys window | grep mFocusedApp | sed 's/.*\s\(.*\)\/.*/\1/' | sed -n '1p'
        return
    elif [[ -n $filter && $filter != "-s" && $filter != "-3" ]]; then
        log::err "unknown option: $filter"
        exit -1
    fi

    local pkg=$($ADB shell pm list package $filter -u | cut -d ':' -f 2 | $(cfg::fzf_package))
    if [[ -z $pkg ]]; then
        exit $ERR_CANCELLED
    fi

    echo $pkg
}

function install_apk() {
    local apk=${1:-}

    if [[ -n $apk ]]; then
        $ADB install -r -t "$apk"
        exit
    fi

    local paths=$(cfg::install_paths)
    paths=$(eval echo "$paths")

    local list=$(find $paths -name '*.apk')
    if [[ -z $list ]]; then
        log::err "no matches found: *.apk"
        exit -1
    fi
    apk=$(echo "$list" | $(cfg::fzf_file))
    if [[ -z $apk ]]; then
        exit $ERR_CANCELLED
    fi

    $ADB install -r -t "$apk"
}

function uninstall_package() {
    local pkg=${1:-}
    if [[ -z $pkg ]]; then
        pkg=$($0 pkg -3)
    fi
    $ADB uninstall $pkg
}

function pull_apk() {
    local pkg=${1:-}
    local path=""

    if [[ -z $pkg ]]; then
        pkg=$($0 pkg)
    fi

    # todo
    if [[ -z $path ]]; then
        path=$(cfg::pullapk_output)
        path=$(eval "echo "$path"")
    fi

    local _path=$(server::exec pi $pkg --path)
    $ADB pull $_path "$path" &>/dev/null
    echo $path
}

function dump_package_info() {
    local pkg=${1:-}
    if [[ -z $pkg ]]; then
        pkg=$($0 pkg)
    fi

    server::exec dp $pkg
}

function get_package_info() {
    local pkg=${1:-}
    if [[ -z $pkg ]]; then
        log::err "no package specified"
        exit -1
    fi

    shift 1

    server::exec pi "$@"
}

function start_app() {
    local pkg=${1:-}
    if [[ -z $pkg ]]; then
        pkg=$($0 pkg)
    fi

    local activity=$(server::exec pi $pkg -m)
    if [[ -z $activity ]]; then
        log::err "the main activity of $pkg not found"
        exit -1
    fi

    $ADB shell am start $pkg/$activity
}

function start_app_setting() {
    local pkg=${1:-}
    if [[ -z $pkg ]]; then
        pkg=$($0 pkg)
    fi

    $ADB shell am start -a android.settings.APPLICATION_DETAILS_SETTINGS package:$pkg
}

function start_dev_opts() {
    $ADB shell am start -a android.settings.APPLICATION_DEVELOPMENT_SETTINGS
}

function open_url() {
    local url=${1:-}
    if [[ -z $url ]]; then
        log::err "no url specified"
        exit -1
    fi
    url=${url// /\\ }

    if [[ -n $url && ${url:0:4} != "http" ]]; then
        url="http://$url"
    fi

    $ADB shell am start -d "$url"
}

function set_clipboard() {
    shift 1
    local text=${1:-}
    text=${text// /\\ }

    server::exec scp "$text"

    case ${2:-} in
    "-p") $ADB shell input keyevent 279 ;;
    "-i")
        $ADB shell input keyevent 279
        server::exec scp
        ;;
    esac
}

function screencap() {
    local path=${1:-}
    if [[ -z $path ]]; then
        path=$(cfg::screencap_output)
        path=$(eval "echo "$path"")
    fi
    if [[ ! -e $(dirname $path) ]]; then
        mkdir -p $(dirname $path)
    fi
    $ADB shell screencap -p >"$path"
    echo $path
}

function screenrecord() {
    shift 1
    local option=${1:-}
    if [[ $option == "--help" || $option == "-h" ]]; then
        $ADB shell screenrecord --help
        exit
    fi

    local path=""
    local options=""
    case $option in
    "-o")
        path=$2
        shift 2
        options=$@
        ;;
    *)
        path=$(cfg::screenrecord_output)
        path=$(eval "echo "$path"")
        options=$@
        ;;
    esac
    if [[ ! -e $(dirname $path) ]]; then
        mkdir -p $(dirname $path)
    fi

    local show_touches=$($ADB shell settings get system show_touches)
    if [[ $show_touches == null ]]; then
        show_touches=0
    fi
    if [[ $(cfg::screenrecord_touches) == 1 ]]; then
        $ADB shell settings put system show_touches 1
    fi

    local _path=$(cfg::screenrecord_cache)
    _path=$(eval "echo "$_path"")
    _path=${_path// /\\ }

    trap "sleep 1 && $ADB pull $_path \"$path\">/dev/null; \
    $ADB shell rm \"$_path\" ; \
    $ADB shell settings put system show_touches $show_touches ; \
    echo ; echo $path" INT
    $ADB shell screenrecord $_path $options
}

function winrecord() {
    local last=""
    while true; do
        local window=$($ADB shell dumpsys window | grep mCurrentFocus)
        [[ -n $window ]] || exit
        window=${window:16}
        if [[ $window != "null" && $window != $last ]]; then
            last=$window
            echo $last
        fi
    done
}

function version() {
    echo -e "Version\t\t" $VERSION
    echo -e "Build date\t" $(date --date="@$BUILD_DATE" '+%Y/%m/%d %H:%M:%S')
    echo -e "Install path\t" $0
}

case ${1:-} in
"config")
    case ${2:-} in
    "list") cfg::list ;;
    "get") cfg::get "${3:-}" '' ;;
    "set") cfg::set "${3:-}" "${4:-}" ;;
    "reset" | "unset" | "remove") cfg::remove "${3:-}" ;;
    "") log::err "no config option specified" ;;
    *) log::err "unknown option: ${2:-}" ;;
    esac
    ;;
"ls") $ADB devices ;;
"ll") $ADB devices -l ;;
"serial") select_serial ;;
"connect-localhost") connect_local_device ${2:-} ;;
"disconnect") disconnect_device ;;
"disconnect-ssh") disconnect_ssh_device ${2:-} ;;
"reconnect") reconnect_device ;;
"pkg") select_package ${2:-} ;;
"install") install_apk ${2:-} ;;
"uninstall") uninstall_package ${2:-} ;;
"pullapk") pull_apk ${2:-} ;;
"dumppkg") dump_package_info ${2:-} ;;
"pkginfo") get_package_info "$@" ;;
"startapp") start_app ${2:-} ;;
"appsetting") start_app_setting ${2:-} ;;
"devopt") start_dev_opts ;;
"openurl") open_url ${2:-} ;;
"setclip") set_clipboard "$@" ;;
"screencap") screencap ${2:-} ;;
"screenrecord") screenrecord "$@" ;;
"winrecord") winrecord ;;
"version") version ;;
*) $ADB "$@" ;;
esac
